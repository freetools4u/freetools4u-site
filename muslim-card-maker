<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>My Muslim Identity Card Generator - Islamicpedia.blog</title>
<meta name="description" content="Create your personalized Muslim Identity Card with name, meaning, Quran mention, role, traits, favorite verse, and profile image. Stylish, shareable, and Islamic-themed." />

<!-- Google Fonts: Scheherazade New for Arabic, Montserrat for modern touch, Playfair Display for elegance -->
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Playfair+Display:wght@400;700&family=Scheherazade+New:wght@400;700&display=swap" rel="stylesheet">

<!-- Font Awesome for Icons (Simplified for brevity) -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

<style>
  /* --- CSS Variables (Enhanced) --- */
  :root {
    --primary-color: #0b3d91; /* Deep Blue */
    --secondary-color: #0a74da; /* Lighter Blue */
    --accent-color: #e2a500; /* Golden */
    --light-accent-color: #ffd700; /* Brighter Gold */
    --bg-color: #f0f2f5; /* Light Gray Background */
    --card-bg: #ffffff; /* White Card Background */
    --text-color: #333; /* Darker Text */
    --text-muted: #6c757d;
    --border-color: #ddd; /* Light Border */
    --shadow-color: rgba(0, 0, 0, 0.1);
    --hover-shadow: rgba(0, 0, 0, 0.15);

    /* Islamic Pattern Background (subtle geometric) */
    --islamic-pattern: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><path fill="%23e8e8e8" d="M0 0h20v20H0z"/><path fill="%23dcdcdc" d="M10 0L0 10l10 10 10-10L10 0zM2 10L10 2l8 8-8 8L2 10z"/><path fill="%23f0f0f0" d="M10 4.472L4.472 10 10 15.528 15.528 10 10 4.472z"/></svg>');
  }

  /* --- Base Styles --- */
  * {
    box-sizing: border-box;
  }

  body {
    margin: 0; padding: 0;
    font-family: 'Montserrat', sans-serif;
    background: var(--bg-color) var(--islamic-pattern); /* Subtle pattern background */
    color: var(--text-color);
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: flex-start; /* Align to top initially */
    padding: 30px 20px;
    line-height: 1.6;
  }

  main {
    width: 100%;
    max-width: 680px; /* Slightly wider main container */
    background: var(--card-bg);
    border-radius: 15px;
    box-shadow: 0 15px 40px var(--shadow-color);
    padding: 40px 50px 60px;
    position: relative; /* For progress bar */
    overflow: hidden; /* For rounded corners with inner pattern */
  }

  h1.main-header-arabic { /* Changed class for specific styling */
    font-family: 'Scheherazade New', serif;
    font-size: 3.2rem;
    color: var(--primary-color);
    text-align: center;
    margin: 0 0 5px;
    font-weight: 700;
  }

  h2.main-header-english { /* Changed class for specific styling */
    font-family: 'Playfair Display', serif;
    font-weight: 700;
    font-size: 1.8rem;
    color: var(--secondary-color);
    text-align: center;
    margin: 0 0 35px;
    letter-spacing: 1.5px;
  }

  /* --- Progress Indicator --- */
  .progress-indicator {
    display: flex;
    justify-content: center;
    gap: 15px;
    margin-bottom: 40px;
    position: relative;
    padding-top: 15px; /* Space for the line */
  }

  .progress-line {
    position: absolute;
    top: 25px; /* Aligns with middle of dots */
    left: 10%;
    right: 10%;
    height: 3px;
    background-color: var(--border-color);
    z-index: 0;
  }

  .progress-line-fill {
    height: 100%;
    width: 0;
    background-color: var(--accent-color);
    transition: width 0.4s ease-out;
  }

  .progress-dot {
    width: 14px;
    height: 14px;
    background-color: var(--border-color);
    border-radius: 50%;
    position: relative;
    z-index: 1;
    transition: background-color 0.3s ease, transform 0.3s ease;
    border: 2px solid var(--card-bg); /* to make it stand out on the line */
  }

  .progress-dot.active {
    background-color: var(--accent-color);
    transform: scale(1.2);
  }
  .progress-dot.completed {
    background-color: var(--primary-color);
  }

  /* --- Form Steps --- */
  .step {
    display: none;
    animation: fadeInSlide 0.6s ease-out forwards;
    padding-top: 20px; /* Space from progress indicator */
  }
  .step.active {
    display: block;
  }

  @keyframes fadeInSlide {
    from {opacity: 0; transform: translateY(20px);}
    to {opacity: 1; transform: translateY(0);}
  }

  label {
    font-weight: 600;
    display: block;
    margin-bottom: 10px;
    font-size: 1.05rem;
    color: var(--primary-color);
  }

  input[type="text"], select, textarea {
    width: 100%;
    padding: 12px 16px;
    font-size: 1.05rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    background-color: #fdfdfd;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    margin-bottom: 20px;
  }
  input[type="text"]:focus,
  select:focus,
  textarea:focus {
    border-color: var(--accent-color);
    box-shadow: 0 0 0 3px rgba(226, 165, 0, 0.2); /* Using direct RGB for clarity */
    outline: none;
  }

  /* Radio & Checkbox Styling */
  .radio-group, .traits-list {
    margin-bottom: 25px;
  }
  .radio-label, .traits-list label {
    display: flex;
    align-items: center;
    cursor: pointer;
    user-select: none;
    margin-bottom: 12px;
    font-weight: 500;
    color: var(--text-color);
  }
  input[type="radio"], input[type="checkbox"] {
    appearance: none;
    width: 20px;
    height: 20px;
    border: 2px solid var(--secondary-color);
    border-radius: 50%; /* for radio */
    margin-right: 10px;
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }
  input[type="checkbox"] {
    border-radius: 4px; /* for checkbox */
  }
  input[type="radio"]:checked::before {
    content: '';
    width: 10px;
    height: 10px;
    background-color: var(--accent-color);
    border-radius: 50%;
    position: absolute;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
  }
  input[type="checkbox"]:checked::before {
    content: '\2713'; /* Checkmark character */
    font-size: 14px;
    color: var(--card-bg);
    position: absolute;
    top: 50%; left: 50%;
    transform: translate(-50%, -50%);
  }
  input[type="radio"]:checked, input[type="checkbox"]:checked {
    border-color: var(--accent-color);
    background-color: var(--accent-color);
  }
  input[type="radio"]:focus, input[type="checkbox"]:focus {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
  }

  /* Buttons */
  .btn-group {
    margin-top: 30px;
    display: flex;
    justify-content: space-between;
    gap: 15px;
  }
  button {
    background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 12px 30px;
    font-weight: 700;
    font-size: 1.05rem;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  button:disabled {
    background: #cccccc;
    box-shadow: none;
    cursor: not-allowed;
    transform: none;
  }
  button:hover:not(:disabled) {
    background: linear-gradient(135deg, var(--accent-color) 0%, var(--light-accent-color) 100%);
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
  }
  button[id^="prevBtn"] { /* Target all previous buttons */
    background: none;
    border: 2px solid var(--primary-color);
    color: var(--primary-color);
    box-shadow: none;
  }
  button[id^="prevBtn"]:hover:not(:disabled) {
    background: var(--primary-color);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  /* Profile image preview */
  #profilePicInput {
    margin-bottom: 10px;
  }
  #profilePicPreview {
    display: block;
    width: 150px; /* Larger preview */
    height: 150px;
    border-radius: 50%;
    margin: 20px auto 25px;
    border: 5px solid var(--accent-color);
    object-fit: cover;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  #profilePicPlaceholder {
    width: 150px;
    height: 150px;
    background-color: var(--border-color);
    border-radius: 50%;
    margin: 20px auto 25px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--text-muted);
    font-size: 4rem;
    border: 5px solid var(--border-color);
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  }
  #profilePicPlaceholder i {
    color: var(--secondary-color);
  }

  /* --- Final Card Container --- */
  #finalCard {
    display: none;
    background: linear-gradient(to bottom right, #fdfdfd, #f9f9f9); /* Subtle gradient */
    border-radius: 20px; /* More rounded */
    box-shadow: 0 20px 50px rgba(0,0,0,0.2); /* Deeper shadow */
    padding: 40px;
    text-align: center;
    position: relative;
    overflow: hidden; /* For patterns */
    border: 2px solid var(--light-accent-color); /* Elegant border */
    animation: cardAppear 0.8s ease-out forwards; /* Card appearance animation */
  }

  @keyframes cardAppear {
    from {opacity: 0; transform: scale(0.9) translateY(20px);}
    to {opacity: 1; transform: scale(1) translateY(0);}
  }

  /* Inner pattern for card */
  #finalCard::before {
    content: '';
    position: absolute;
    top: 0; left: 0; right: 0; bottom: 0;
    background: var(--islamic-pattern);
    opacity: 0.1; /* Very subtle */
    z-index: 0;
    border-radius: 20px; /* Match card border-radius */
  }
  #finalCard > * {
    position: relative; /* Ensure content is above pattern */
    z-index: 1;
  }

  /* Card specific headers */
  #finalCard .card-title-arabic { /* Smaller, different color */
    font-family: 'Scheherazade New', serif;
    font-size: 2rem;
    color: var(--secondary-color); /* Different color */
    margin-bottom: 5px;
  }
  #finalCard .card-title-english { /* Smaller, different color */
    font-family: 'Playfair Display', serif;
    font-size: 1.3rem;
    color: var(--text-muted); /* Different color */
    margin-bottom: 25px;
  }

  /* Profile section on final card */
  .final-profile-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 35px;
  }

  #finalProfilePic {
    width: 160px;
    height: 160px;
    border-radius: 50%;
    border: 6px solid var(--accent-color); /* Thicker golden border */
    object-fit: cover;
    box-shadow: 0 8px 20px rgba(0,0,0,0.15); /* More prominent shadow */
  }
  #finalProfilePicPlaceholder {
    width: 160px;
    height: 160px;
    background-color: var(--border-color);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    color: var(--text-muted);
    font-size: 4.5rem;
    border: 6px solid var(--accent-color);
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }
  #finalProfilePicPlaceholder i {
    color: var(--secondary-color);
  }

  #finalUserName { /* Styling for the name below the picture */
    font-family: 'Playfair Display', serif;
    font-size: 2.2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-top: 20px;
    letter-spacing: 1px;
    text-shadow: 1px 1px 2px rgba(0,0,0,0.05);
  }

  /* Info Grid Layout */
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); /* Adapt to available space */
    gap: 25px; /* More space between items */
    margin-bottom: 40px;
    text-align: left;
    padding: 0 10px;
  }

  .info-item {
    background: #fdfdfd;
    border: 1px solid var(--border-color);
    border-left: 5px solid var(--accent-color); /* Left accent border */
    border-radius: 10px;
    padding: 15px 20px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  .info-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 20px rgba(0,0,0,0.1);
  }

  .info-label {
    font-weight: 700;
    color: var(--secondary-color);
    font-size: 0.95rem;
    display: flex;
    align-items: center;
    margin-bottom: 5px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  .info-label i { /* Icon for info label */
    margin-right: 8px;
    color: var(--accent-color);
    font-size: 1.1em;
  }
  .info-value {
    color: var(--primary-color);
    font-weight: 600;
    font-size: 1.1rem;
    word-wrap: break-word; /* Ensure long text wraps */
    width: 100%;
  }

  /* Heartfelt message */
  #heartfeltMessage {
    font-family: 'Playfair Display', serif; /* Elegant font */
    font-style: italic;
    font-size: 1.15rem;
    color: var(--text-muted);
    margin-bottom: 45px;
    padding: 20px 30px;
    background: #fdfdfd;
    border-radius: 12px;
    border: 1px dashed var(--border-color);
    line-height: 1.8;
  }
  #heartfeltMessage a {
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 700;
    transition: color 0.2s ease;
  }
  #heartfeltMessage a:hover {
    color: var(--primary-color);
    text-decoration: underline;
  }

  /* Share buttons container */
  #shareOptions { /* New container for all sharing buttons */
    display: flex;
    flex-direction: column; /* Stack download and share buttons */
    gap: 20px;
    margin-bottom: 30px;
  }

  .share-button-group {
    display: flex;
    flex-wrap: wrap; /* Allow wrapping on small screens */
    justify-content: center;
    gap: 15px; /* Reduced gap for more buttons */
  }

  .share-button-group a, .share-button-group button { /* Apply styles to anchor and new button */
    background: var(--secondary-color);
    color: white;
    text-decoration: none;
    padding: 10px 18px; /* Slightly smaller padding */
    border-radius: 6px;
    font-weight: 600;
    font-size: 1rem;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    border: none; /* Remove default button border */
    cursor: pointer;
  }
  .share-button-group a:hover, .share-button-group button:hover {
    background: var(--accent-color);
    transform: translateY(-2px);
    box-shadow: 0 6px 15px rgba(0,0,0,0.15);
  }
  .share-button-group a i, .share-button-group button i {
    font-size: 1.2em;
  }

  /* Footer credit on card */
  #finalCardFooter {
    position: absolute;
    bottom: 15px;
    left: 0;
    right: 0;
    font-size: 0.85rem;
    color: var(--text-muted);
    font-family: 'Montserrat', sans-serif;
    text-align: center;
  }
  #finalCardFooter a {
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease;
  }
  #finalCardFooter a:hover {
    color: var(--primary-color);
    text-decoration: underline;
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    main {
      padding: 30px;
    }
    h1.main-header-arabic {
      font-size: 2.8rem;
    }
    h2.main-header-english {
      font-size: 1.4rem;
    }
    #finalCard .card-title-arabic {
      font-size: 1.8rem;
    }
    #finalCard .card-title-english {
      font-size: 1.1rem;
    }
    #finalUserName {
      font-size: 1.8rem;
    }
    .progress-indicator {
      gap: 10px;
    }
    .progress-dot {
      width: 12px;
      height: 12px;
    }
    .info-grid {
      grid-template-columns: 1fr; /* Stack items on small screens */
      gap: 20px;
    }
    #finalProfilePic, #finalProfilePicPlaceholder {
      width: 130px;
      height: 130px;
    }
    #heartfeltMessage {
      font-size: 1rem;
      padding: 15px 20px;
    }
    .share-button-group a, .share-button-group button {
      padding: 8px 12px;
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    main {
      padding: 20px;
      box-shadow: 0 8px 20px var(--shadow-color);
    }
    h1.main-header-arabic {
      font-size: 2.2rem;
    }
    h2.main-header-english {
      font-size: 1.2rem;
      margin-bottom: 25px;
    }
    .progress-line, .progress-line-fill {
      display: none; /* Hide line on very small screens */
    }
    .progress-indicator {
      gap: 8px; /* More compact dots */
    }
    label {
      font-size: 0.95rem;
    }
    input[type="text"], select, textarea {
      padding: 10px 14px;
      font-size: 0.95rem;
    }
    .btn-group {
      flex-direction: column;
      gap: 10px;
    }
    button {
      width: 100%;
      padding: 10px 20px;
      font-size: 1rem;
    }
    #finalProfilePic, #finalProfilePicPlaceholder {
      width: 100px;
      height: 100px;
      border-width: 4px;
    }
    #finalUserName {
      font-size: 1.6rem;
    }
    .info-item {
      padding: 12px 15px;
    }
    .info-label {
      font-size: 0.9rem;
    }
    .info-value {
      font-size: 1rem;
    }
    #heartfeltMessage {
      font-size: 0.95rem;
      padding: 12px 15px;
    }
    .share-button-group {
      gap: 10px;
      flex-direction: column;
    }
    .share-button-group a, .share-button-group button {
      width: 80%; /* Occupy more width */
      margin: 0 auto;
      justify-content: center;
    }
  }
</style>
</head>
<body>

<main>
  <h1 class="main-header-arabic">أَنَا مُسْلِمٌ</h1>
  <h2 class="main-header-english">My Muslim Identity Card Generator</h2>

  <!-- Progress Indicator -->
  <div class="progress-indicator" id="progressIndicator">
    <div class="progress-line"><div class="progress-line-fill" id="progressLineFill"></div></div>
    <!-- Dots will be generated by JS -->
  </div>

  <!-- Step Form -->
  <form id="cardForm" novalidate>
    <!-- Step 1: Name -->
    <section class="step active" data-step="1">
      <label for="nameInput">Enter Your Name</label>
      <input type="text" id="nameInput" placeholder="e.g. Ahmad" required autofocus />
      <div class="btn-group">
        <div></div>
        <button type="button" id="nextBtn1" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 2: Meaning -->
    <section class="step" data-step="2">
      <label for="meaningInput">Enter the Meaning of Your Name</label>
      <textarea id="meaningInput" rows="2" placeholder="e.g. Highly praised, worthy of praise" required></textarea>
      <div class="btn-group">
        <button type="button" id="prevBtn2"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn2" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 3: Mentioned in Quran -->
    <section class="step" data-step="3">
      <label>Is Your Name Mentioned in the Quran?</label>
      <div class="radio-group" id="quranMentionGroup">
        <label class="radio-label"><input type="radio" name="mentionedInQuran" value="Yes" /> Yes</label>
        <label class="radio-label"><input type="radio" name="mentionedInQuran" value="No" /> No</label>
      </div>
      <div class="btn-group">
        <button type="button" id="prevBtn3"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn3" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 4: Gender -->
    <section class="step" data-step="4">
      <label for="genderSelect">Select Your Gender</label>
      <select id="genderSelect" required>
        <option value="">-- Select Gender --</option>
        <option value="Male">Male</option>
        <option value="Female">Female</option>
        <option value="Other">Other</option>
      </select>
      <div class="btn-group">
        <button type="button" id="prevBtn4"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn4" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 5: Islamic Role -->
    <section class="step" data-step="5">
      <label for="roleSelect">Select Your Islamic Role</label>
      <select id="roleSelect" required>
        <option value="">-- Select Role --</option>
        <option value="Ashiq-e-Rasool ﷺ">Ashiq-e-Rasool ﷺ (Lover of the Prophet)</option>
        <option value="True Believer (Mumin)">True Believer (Mumin)</option>
        <option value="Islamic Warrior (of Truth)">Islamic Warrior (of Truth)</option>
        <option value="Guardian of Haya (Modesty)">Guardian of Haya (Modesty)</option>
        <option value="Ummati of Prophet Muhammad ﷺ">Ummati of Prophet Muhammad ﷺ</option>
        <option value="Servant of Allah (SWT)">Servant of Allah (SWT)</option>
        <option value="Seeker of Knowledge">Seeker of Knowledge</option>
        <option value="Da'ee (Caller to Islam)">Da'ee (Caller to Islam)</option>
        <option value="Musafir (Traveler on Earth)">Musafir (Traveler on Earth)</option>
        <option value="Protector of Justice">Protector of Justice</option>
        <option value="Spreader of Peace">Spreader of Peace</option>
        <option value="Other">Other (Type below)</option>
      </select>
      <input type="text" id="customRoleInput" placeholder="Type your custom role" style="display:none; margin-top:10px;" />
      <div class="btn-group">
        <button type="button" id="prevBtn5"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn5" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 6: Spiritual Traits -->
    <section class="step" data-step="6">
      <label>Select Your Spiritual Traits (Choose one or more)</label>
      <div class="traits-list" id="traitsContainer">
        <label><input type="checkbox" value="Patient" /> Patient</label>
        <label><input type="checkbox" value="Forgiving" /> Forgiving</label>
        <label><input type="checkbox" value="Trustworthy" /> Trustworthy</label>
        <label><input type="checkbox" value="Generous" /> Generous</label>
        <label><input type="checkbox" value="Humble" /> Humble</label>
        <label><input type="checkbox" value="Truthful" /> Truthful</label>
        <label><input type="checkbox" value="Kind" /> Kind</label>
        <label><input type="checkbox" value="Brave" /> Brave</label>
        <label><input type="checkbox" value="Righteous" /> Righteous</label>
        <label><input type="checkbox" value="Pious" /> Pious</label>
        <label><input type="checkbox" value="Grateful" /> Grateful</label>
        <label><input type="checkbox" value="Just" /> Just</label>
      </div>
      <div class="btn-group">
        <button type="button" id="prevBtn6"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn6" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 7: Favorite Quran Verse -->
    <section class="step" data-step="7">
      <label for="verseSelect">Select Your Favorite Quran Verse</label>
      <select id="verseSelect" required>
        <option value="">-- Select a Verse --</option>
        <option value="Indeed, with hardship comes ease. (94:6)">Indeed, with hardship comes ease. (94:6)</option>
        <option value="So remember Me; I will remember you. And be grateful to Me and do not deny Me. (2:152)">So remember Me; I will remember you. (2:152)</option>
        <option value="And He is with you wherever you are. (57:4)">And He is with you wherever you are. (57:4)</option>
        <option value="Indeed, Allah loves those who are constantly repentant and loves those who purify themselves. (2:222)">Indeed, Allah loves those who are constantly repentant. (2:222)</option>
        <option value="Our Lord, give us in this world [that which is] good and in the Hereafter [that which is] good and protect us from the punishment of the Fire. (2:201)">Our Lord, give us in this world [that which is] good... (2:201)</option>
        <option value="And rely upon Allah; and sufficient is Allah as Disposer of affairs. (33:3)">And rely upon Allah; and sufficient is Allah. (33:3)</option>
        <option value="Indeed, my Lord is near and responsive. (11:61)">Indeed, my Lord is near and responsive. (11:61)</option>
        <option value="And put your trust in the Almighty, the Most Merciful. (26:217)">And put your trust in the Almighty, the Most Merciful. (26:217)</option>
        <option value="Verily, in the remembrance of Allah do hearts find tranquility. (13:28)">Verily, in the remembrance of Allah do hearts find tranquility. (13:28)</option>
        <option value="And Allah would not punish them while they seek forgiveness. (8:33)">And Allah would not punish them while they seek forgiveness. (8:33)</option>
        <option value="But perhaps you hate a thing and it is good for you; and perhaps you love a thing and it is bad for you. (2:216)">But perhaps you hate a thing and it is good for you. (2:216)</option>
        <option value="No soul knows what has been hidden for them of comfort for eyes as reward for what they used to do. (32:17)">No soul knows what has been hidden for them of comfort for eyes. (32:17)</option>
        <option value="Say, 'He is Allah, [who is] One, Allah, the Eternal Refuge.' (112:1-2)">Say, 'He is Allah, [who is] One...' (112:1-2)</option>
        <option value="And it is He who made the night and the day and the sun and the moon, all [moving] in an orbit. (21:33)">And it is He who made the night and the day. (21:33)</option>
        <option value="So fear Allah as much as you are able and listen and obey and spend [in His cause]; it is better for your souls. (64:16)">So fear Allah as much as you are able. (64:16)</option>
        <option value="And do not despair of the mercy of Allah. Indeed, no one despairs of the mercy of Allah except for the disbelieving people. (12:87)">And do not despair of the mercy of Allah. (12:87)</option>
        <option value="Indeed, Allah is with the patient. (2:153)">Indeed, Allah is with the patient. (2:153)</option>
        <option value="And your Lord is going to give you, and you will be satisfied. (93:5)">And your Lord is going to give you, and you will be satisfied. (93:5)</option>
        <option value="Our Lord, do not let our hearts deviate after You have guided us and grant us from Yourself mercy. Indeed, You are the Bestower. (3:8)">Our Lord, do not let our hearts deviate... (3:8)</option>
        <option value="The most beloved of deeds to Allah are those that are most consistent, even if it is small. (Hadith Qudsi, related to deeds)">The most beloved of deeds to Allah... (Hadith)</option>
        <option value="Add Custom Verse">-- Add Custom Verse --</option>
      </select>
      <textarea id="customVerseInput" rows="2" placeholder="Type your custom verse here" style="display:none; margin-top:10px;"></textarea>
      <div class="btn-group">
        <button type="button" id="prevBtn7"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="nextBtn7" disabled>Next <i class="fas fa-arrow-right"></i></button>
      </div>
    </section>

    <!-- Step 8: Upload Profile Image -->
    <section class="step" data-step="8">
      <label for="profilePicInput">Upload Your Profile Picture (optional)</label>
      <input type="file" id="profilePicInput" accept="image/*" />
      <img id="profilePicPreview" alt="Profile Preview" style="display:none" />
      <div id="profilePicPlaceholder" style="display:flex;"><i class="fas fa-user"></i></div>

      <div class="btn-group">
        <button type="button" id="prevBtn8"><i class="fas fa-arrow-left"></i> Previous</button>
        <button type="button" id="generateCard">Generate Card <i class="fas fa-magic"></i></button>
      </div>
    </section>
  </form>

  <!-- Final Card -->
  <!-- The final card content that will be converted to image -->
  <section id="finalCard" aria-live="polite">
    <h3 class="card-title-arabic">أَنَا مُسْلِمٌ</h3>
    <p class="card-title-english" id="finalCardSubtitle"></p>

    <div class="final-profile-section">
      <img id="finalProfilePic" alt="Profile Picture" src="" style="display:none" />
      <div id="finalProfilePicPlaceholder" style="display:flex;"><i class="fas fa-user"></i></div>
      <h2 id="finalUserName"></h2>
    </div>

    <div class="info-grid" id="finalInfoGrid">
      <!-- Categories inserted dynamically here -->
    </div>

    <div id="heartfeltMessage">
      "Indeed, Allah is with those who fear Him and those who are doers of good." <br />– Quran 16:128
      <br /><br />
      Created with <i class="fas fa-heart" style="color: var(--accent-color);"></i> by <a href="https://www.islamicpedia.blog" target="_blank" rel="noopener noreferrer">Islamicpedia.blog</a>
    </div>

    <!-- This div wraps elements that should be part of the image generation, but not the share buttons themselves -->
    <div id="cardForScreenshot" style="position:absolute; top:-9999px; left:-9999px;"></div>

    <div id="shareOptions">
      <button id="downloadCardBtn" class="download-button"><i class="fas fa-download"></i> Download Card</button>
      <button id="shareNativeBtn" class="share-button"><i class="fas fa-share-alt"></i> Share Card</button>
      <div class="share-button-group" id="fallbackShareButtons">
        <a href="#" id="shareWhatsApp" target="_blank" rel="noopener noreferrer" aria-label="Share on WhatsApp"><i class="fab fa-whatsapp"></i> WhatsApp</a>
        <a href="#" id="shareFacebook" target="_blank" rel="noopener noreferrer" aria-label="Share on Facebook"><i class="fab fa-facebook-f"></i> Facebook</a>
        <a href="#" id="shareTelegram" target="_blank" rel="noopener noreferrer" aria-label="Share on Telegram"><i class="fab fa-telegram-plane"></i> Telegram</a>
        <a href="#" id="shareX" target="_blank" rel="noopener noreferrer" aria-label="Share on X (Twitter)"><i class="fab fa-x-twitter"></i> X (Twitter)</a>
        <a href="#" id="shareSnapchat" target="_blank" rel="noopener noreferrer" aria-label="Share on Snapchat"><i class="fab fa-snapchat-ghost"></i> Snapchat</a>
      </div>
    </div>

    <div id="finalCardFooter">
      © 2025 Islamicpedia.blog — All rights reserved.
    </div>
  </section>
</main>

<!-- html2canvas library for screenshotting -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

<script>
(() => {
  // --- Elements ---
  const steps = document.querySelectorAll('.step');
  const totalSteps = steps.length;
  let currentStepIndex = 0;

  // Form inputs
  const nameInput = document.getElementById('nameInput');
  const meaningInput = document.getElementById('meaningInput');
  const quranRadios = document.getElementsByName('mentionedInQuran');
  const genderSelect = document.getElementById('genderSelect');
  const roleSelect = document.getElementById('roleSelect');
  const customRoleInput = document.getElementById('customRoleInput');
  const traitsCheckboxes = document.querySelectorAll('#traitsContainer input[type="checkbox"]');
  const verseSelect = document.getElementById('verseSelect'); // New verse select
  const customVerseInput = document.getElementById('customVerseInput'); // New custom verse input
  const profilePicInput = document.getElementById('profilePicInput');
  const profilePicPreview = document.getElementById('profilePicPreview');
  const profilePicPlaceholder = document.getElementById('profilePicPlaceholder');

  // Buttons
  const nextBtn1 = document.getElementById('nextBtn1');
  const nextBtn2 = document.getElementById('nextBtn2');
  const nextBtn3 = document.getElementById('nextBtn3');
  const nextBtn4 = document.getElementById('nextBtn4');
  const nextBtn5 = document.getElementById('nextBtn5');
  const nextBtn6 = document.getElementById('nextBtn6');
  const nextBtn7 = document.getElementById('nextBtn7');
  const generateCardBtn = document.getElementById('generateCard');

  const prevBtn2 = document.getElementById('prevBtn2');
  const prevBtn3 = document.getElementById('prevBtn3');
  const prevBtn4 = document.getElementById('prevBtn4');
  const prevBtn5 = document.getElementById('prevBtn5');
  const prevBtn6 = document.getElementById('prevBtn6');
  const prevBtn7 = document.getElementById('prevBtn7');
  const prevBtn8 = document.getElementById('prevBtn8');

  const cardForm = document.getElementById('cardForm');
  const finalCard = document.getElementById('finalCard');

  // Final card elements
  const finalCardSubtitle = document.getElementById('finalCardSubtitle');
  const finalUserName = document.getElementById('finalUserName');
  const finalProfilePic = document.getElementById('finalProfilePic');
  const finalProfilePicPlaceholder = document.getElementById('finalProfilePicPlaceholder');
  const finalInfoGrid = document.getElementById('finalInfoGrid');
  const cardForScreenshot = document.getElementById('cardForScreenshot'); // Hidden div for screenshot

  // Share buttons
  const downloadCardBtn = document.getElementById('downloadCardBtn');
  const shareNativeBtn = document.getElementById('shareNativeBtn');
  const fallbackShareButtons = document.getElementById('fallbackShareButtons');

  // Progress Indicator
  const progressIndicator = document.getElementById('progressIndicator');
  const progressLineFill = document.getElementById('progressLineFill');

  // --- Helper Functions ---

  // Initialize progress dots
  function initializeProgressDots() {
    for (let i = 0; i < totalSteps; i++) {
      const dot = document.createElement('div');
      dot.classList.add('progress-dot');
      dot.setAttribute('data-step-index', i);
      progressIndicator.appendChild(dot);
    }
  }

  function updateProgressIndicator() {
    const dots = document.querySelectorAll('.progress-dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentStepIndex);
      dot.classList.toggle('completed', index < currentStepIndex);
    });

    const progressPercentage = (currentStepIndex / (totalSteps - 1)) * 100;
    progressLineFill.style.width = `${progressPercentage}%`;
  }

  function showStep(index) {
    steps.forEach((step, i) => {
      step.classList.remove('active');
      if (i === index) {
        step.classList.add('active');
      }
    });
    currentStepIndex = index;
    updateButtons();
    updateProgressIndicator();
  }

  // Enable/Disable next buttons based on validations
  function updateButtons() {
    // Disable all "Next" buttons initially
    [nextBtn1, nextBtn2, nextBtn3, nextBtn4, nextBtn5, nextBtn6, nextBtn7, generateCardBtn].forEach(btn => {
      if (btn) btn.disabled = true;
    });

    switch (currentStepIndex) {
      case 0:
        if (nameInput.value.trim()) nextBtn1.disabled = false;
        break;
      case 1:
        if (meaningInput.value.trim()) nextBtn2.disabled = false;
        break;
      case 2:
        if (Array.from(quranRadios).some(r => r.checked)) nextBtn3.disabled = false;
        break;
      case 3:
        if (genderSelect.value) nextBtn4.disabled = false;
        break;
      case 4:
        if (roleSelect.value === "Other") {
          if (customRoleInput.value.trim()) nextBtn5.disabled = false;
        } else {
          if (roleSelect.value) nextBtn5.disabled = false;
        }
        break;
      case 5:
        if (Array.from(traitsCheckboxes).some(chk => chk.checked)) nextBtn6.disabled = false;
        break;
      case 6:
        // Validate verse: either a pre-selected one, or custom one if "Other" is selected
        if (verseSelect.value === "Add Custom Verse") {
          if (customVerseInput.value.trim()) nextBtn7.disabled = false;
        } else {
          if (verseSelect.value) nextBtn7.disabled = false;
        }
        break;
      case 7:
        // Profile pic is optional, so generate button is always enabled here
        generateCardBtn.disabled = false;
        break;
    }
  }

  // --- Event Listeners for validation ---
  nameInput.addEventListener('input', updateButtons);
  meaningInput.addEventListener('input', updateButtons);
  quranRadios.forEach(r => r.addEventListener('change', updateButtons));
  genderSelect.addEventListener('change', updateButtons);

  roleSelect.addEventListener('change', () => {
    if (roleSelect.value === "Other") {
      customRoleInput.style.display = 'block';
      customRoleInput.focus();
    } else {
      customRoleInput.style.display = 'none';
      customRoleInput.value = ''; // Clear custom role if not 'Other'
    }
    updateButtons();
  });
  customRoleInput.addEventListener('input', updateButtons);

  traitsCheckboxes.forEach(chk => chk.addEventListener('change', updateButtons));

  verseSelect.addEventListener('change', () => {
    if (verseSelect.value === "Add Custom Verse") {
      customVerseInput.style.display = 'block';
      customVerseInput.focus();
    } else {
      customVerseInput.style.display = 'none';
      customVerseInput.value = ''; // Clear custom verse if pre-selected
    }
    updateButtons();
  });
  customVerseInput.addEventListener('input', updateButtons);

  profilePicInput.addEventListener('change', () => {
    const file = profilePicInput.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        profilePicPreview.src = e.target.result;
        profilePicPreview.style.display = 'block';
        profilePicPlaceholder.style.display = 'none'; // Hide placeholder
      };
      reader.readAsDataURL(file);
    } else {
      profilePicPreview.style.display = 'none';
      profilePicPreview.src = '';
      profilePicPlaceholder.style.display = 'flex'; // Show placeholder
    }
    updateButtons();
  });

  // --- Navigation Buttons ---
  nextBtn1.addEventListener('click', () => showStep(1));
  nextBtn2.addEventListener('click', () => showStep(2));
  nextBtn3.addEventListener('click', () => showStep(3));
  nextBtn4.addEventListener('click', () => showStep(4));
  nextBtn5.addEventListener('click', () => showStep(5));
  nextBtn6.addEventListener('click', () => showStep(6));
  nextBtn7.addEventListener('click', () => showStep(7));

  prevBtn2.addEventListener('click', () => showStep(0));
  prevBtn3.addEventListener('click', () => showStep(1));
  prevBtn4.addEventListener('click', () => showStep(2));
  prevBtn5.addEventListener('click', () => showStep(3));
  prevBtn6.addEventListener('click', () => showStep(4));
  prevBtn7.addEventListener('click', () => showStep(5));
  prevBtn8.addEventListener('click', () => showStep(6));

  // --- Generate Card ---
  generateCardBtn.addEventListener('click', e => {
    e.preventDefault();

    // Gather data
    const name = nameInput.value.trim();
    const meaning = meaningInput.value.trim();
    const quranMention = Array.from(quranRadios).find(r => r.checked)?.value || "Not specified";
    const gender = genderSelect.value || "Not specified";

    let role = roleSelect.value;
    if (role === "Other") role = customRoleInput.value.trim() || "Not specified";
    else if (!role) role = "Not specified";

    const traits = Array.from(traitsCheckboxes)
      .filter(chk => chk.checked)
      .map(chk => chk.value);
    const traitsText = traits.length > 0 ? traits.join(', ') : "Not specified";

    let verse = verseSelect.value;
    if (verse === "Add Custom Verse") verse = customVerseInput.value.trim() || "Not specified";
    else if (!verse) verse = "Not specified";

    const profilePicSrc = profilePicPreview.src || "";

    // Clear previous info
    finalInfoGrid.innerHTML = "";

    // Set final card content
    finalCardSubtitle.textContent = `${name}'s Identity Card`;
    finalUserName.textContent = name;

    if (profilePicSrc) {
      finalProfilePic.src = profilePicSrc;
      finalProfilePic.style.display = "block";
      finalProfilePicPlaceholder.style.display = "none";
    } else {
      finalProfilePic.style.display = "none";
      finalProfilePicPlaceholder.style.display = "flex";
    }

    // Function to create info items for the grid
    function createInfoItem(label, iconClass, value) {
      const item = document.createElement('div');
      item.className = 'info-item';
      item.innerHTML = `
        <span class="info-label"><i class="${iconClass}"></i> ${label}</span>
        <span class="info-value">${value}</span>
      `;
      return item;
    }

    finalInfoGrid.appendChild(createInfoItem('Meaning of Name', 'fas fa-lightbulb', meaning));
    finalInfoGrid.appendChild(createInfoItem('Quran Mention', 'fas fa-quran', quranMention));
    finalInfoGrid.appendChild(createInfoItem('Gender', 'fas fa-venus-mars', gender));
    finalInfoGrid.appendChild(createInfoItem('Role', 'fas fa-mosque', role));
    finalInfoGrid.appendChild(createInfoItem('Traits', 'fas fa-star', traitsText));
    finalInfoGrid.appendChild(createInfoItem('Favorite Verse', 'fas fa-book-open', verse));

    // Show final card, hide form
    cardForm.style.display = 'none';
    finalCard.style.display = 'block';

    // Scroll to final card
    finalCard.scrollIntoView({ behavior: 'smooth', block: 'start' });
  });

  // --- Image Generation & Sharing ---

  const shareMessage = "Assalamu Alaikum! Check out my personalized Muslim Identity Card 🤗! Made with ❤️ on IslamicPedia.blog";
  const shareUrl = window.location.href;

  downloadCardBtn.addEventListener('click', async () => {
    // Temporarily move #finalCard to the screenshot container
    // This isolates it for html2canvas and avoids screenshotting extra UI elements
    cardForScreenshot.appendChild(finalCard.cloneNode(true)); // Clone to avoid changing live DOM
    const cardElement = cardForScreenshot.querySelector('#finalCard');
    cardElement.style.display = 'block'; // Ensure it's visible for capture

    const options = {
        scale: 2, // Increase scale for higher resolution
        useCORS: true,
        backgroundColor: null, // Allow transparency if card has it
        allowTaint: true // Allow images from other origins (like default user icon)
    };

    try {
        const canvas = await html2canvas(cardElement, options);
        const image = canvas.toDataURL('image/png');

        const a = document.createElement('a');
        a.href = image;
        a.download = `Muslim_ID_Card_${nameInput.value.trim().replace(/\s/g, '_') || 'New'}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
    } catch (error) {
        console.error('Error generating card image:', error);
        alert('Could not generate card image. Please try again.');
    } finally {
        cardForScreenshot.innerHTML = ''; // Clean up temporary element
        finalCard.style.display = 'block'; // Ensure original card is visible
    }
  });

  shareNativeBtn.addEventListener('click', async () => {
    if (navigator.share) {
        // Prepare card for screenshot
        cardForScreenshot.appendChild(finalCard.cloneNode(true));
        const cardElement = cardForScreenshot.querySelector('#finalCard');
        cardElement.style.display = 'block';

        try {
            const canvas = await html2canvas(cardElement, { scale: 2, useCORS: true, backgroundColor: null, allowTaint: true });
            canvas.toBlob(async (blob) => {
                if (blob) {
                    const file = new File([blob], `Muslim_ID_Card_${nameInput.value.trim().replace(/\s/g, '_') || 'New'}.png`, { type: 'image/png' });
                    try {
                        await navigator.share({
                            title: 'My Muslim Identity Card',
                            text: shareMessage,
                            url: shareUrl,
                            files: [file] // Share the generated image file
                        });
                        console.log('Native share successful!');
                    } catch (error) {
                        console.error('Native share failed:', error);
                        // Fallback to URL sharing if file sharing failed or cancelled
                        triggerFallbackShare(shareMessage, shareUrl);
                    }
                } else {
                    console.error('Failed to create blob from canvas.');
                    triggerFallbackShare(shareMessage, shareUrl);
                }
            }, 'image/png');
        } catch (error) {
            console.error('Error creating image for native share:', error);
            triggerFallbackShare(shareMessage, shareUrl);
        } finally {
            cardForScreenshot.innerHTML = ''; // Clean up
            finalCard.style.display = 'block'; // Ensure original card is visible
        }
    } else {
        // Fallback for browsers that don't support Web Share API
        alert('Your browser does not support native sharing. Please use the social media buttons below or download the card.');
        triggerFallbackShare(shareMessage, shareUrl);
    }
  });

  // Fallback share function for social media links
  function triggerFallbackShare(message, url) {
    const encodedMessage = encodeURIComponent(message);
    const encodedUrl = encodeURIComponent(url);

    document.getElementById('shareWhatsApp').href = `https://wa.me/?text=${encodedMessage}%0A${encodedUrl}`;
    document.getElementById('shareFacebook').href = `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}"e=${encodedMessage}`;
    document.getElementById('shareTelegram').href = `https://t.me/share/url?url=${encodedUrl}&text=${encodedMessage}`;
    document.getElementById('shareX').href = `https://twitter.com/intent/tweet?url=${encodedUrl}&text=${encodedMessage}`;
    document.getElementById('shareSnapchat').href = `https://www.snapchat.com/scan?attachmentUrl=${encodedUrl}`; // Snapchat is primarily URL-based for web
  }

  // Initial setup
  initializeProgressDots();
  showStep(0); // Show the first step
  updateButtons(); // Set initial button states

  // Check Web Share API support and adjust button visibility
  if (!navigator.share || !navigator.canShare || !navigator.canShare({ files: [new File([], 'a.png', { type: 'image/png' })] })) {
    shareNativeBtn.style.display = 'none'; // Hide if not supported or cannot share files
    fallbackShareButtons.style.display = 'flex'; // Show fallback
  } else {
    fallbackShareButtons.style.display = 'none'; // Hide fallback if native is available
  }

})();
</script>

</body>
</html>
